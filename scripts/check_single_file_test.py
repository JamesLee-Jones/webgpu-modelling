# TODO: Check that the xml output has the correct shape
# TODO: Check that alloy_to_wgsl produces the correct program.
# TODO: Verify that tint and naga correctly accept or reject
import argparse
import filecmp
import os
import subprocess
import jpype
import jpype.imports

ALLOY_DIR = "third_party/org.alloytools.alloy.dist.jar"


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("alloy_model_file")
    parser.add_argument("test_model_file")
    args = parser.parse_args()

    # Get the absolute paths of the input files.
    alloy_model_file = os.path.abspath(args.alloy_model_file)
    test_model_file = os.path.abspath(args.test_model_file)
    test_expected_wgsl_file = test_model_file.replace(".als", ".expected.wgsl")
    if not os.path.exists(test_expected_wgsl_file):
        print("The input model file must have a an equivalently named .expected.wgsl file.")
        exit(1)
    output_file = os.path.basename(alloy_model_file).replace(".als", ".xml")

    # Get the directory where the script is located
    script_dir = os.path.dirname(os.path.abspath(__file__))

    # Set the working directory to the script's parent directory
    parent_dir = os.path.dirname(script_dir)
    os.chdir(parent_dir)

    # Check Alloy is present
    if not os.path.exists(ALLOY_DIR):
        print("Alloy must be in the third_part directory.")
        exit(1)

    # Load Alloy
    try:
        jpype.startJVM(classpath=[ALLOY_DIR])
    except OSError as e:
        print(e)
        exit(1)

    from edu.mit.csail.sdg.parser import CompUtil
    from edu.mit.csail.sdg.alloy4 import A4Reporter
    from edu.mit.csail.sdg.translator import A4Options, TranslateAlloyToKodkod

    # Open both the alloy model and test model, and combine them
    with open(alloy_model_file) as f:
        model_str = f.read()
    with open(test_model_file) as f:
        test_model_str = f.read().strip()
        if not test_model_str.startswith("pred"):
            print("The test model file must start with predicate.")
            exit(1)

        # Find the test predicate name to add a run command.
        predicate_declaration = test_model_str.split("{")[0]
        predicate_name = predicate_declaration.replace("pred", "").strip()

        # Add the test predicate and run it.
        model_str += test_model_str
        model_str += f"run {{{predicate_name}}}"

    rep = A4Reporter()
    opt = A4Options()
    opt.solver = A4Options.SatSolver.SAT4J

    world = CompUtil.parseEverything_fromString(rep, model_str)
    # Get the run command added above.
    cmd = world.getAllCommands()[-1]
    sol = TranslateAlloyToKodkod.execute_command(rep, world.getAllReachableSigs(), cmd, opt)

    sol.writeXML(output_file)

    # Use subprocess to emulate how the command would be called in practice.
    subprocess.run(["python3", "alloy-to-wgsl/alloy_to_wgsl.py", output_file])

    # Clean up XML file.
    os.remove(output_file)

    if not filecmp.cmp("TranslationUnit0.wgsl", test_expected_wgsl_file):
        print(f"The wgsl file generated by the model {test_model_file} does not match {test_expected_wgsl_file}.")
        exit(1)

    print(f"The test {test_model_file} is correct.")


if __name__ == "__main__":
    main()
